* Microservices
	
	1) REST
	2) Small well chosen deployable units
	3) Cloud enabled

* Richardson Maturity Model

	1) Level 1 - Exposing SOAP Services in REST style
	2) Level 2 - Start to think about resources, but using the wrong HTTP methods
	3) Level 3 - Use the correct HTTP methods, and apply HATEOS (next actions) to your resources

* Best practices

	1) Think about the consumer
		- Simple names help your customer to find the appropriate resource to use
		- Provide a rich documentation about what your services do, and how to use then properly
	2) Make the best use of the HTTP Methods
		- Use the correct methods (DELETE, PUT, POST, GET...)
	3) Send the properly response status to your customer
		- Do not send just 200 (Success) to every operation, send 201 (Created) for example
			- Unauthorized, server error, resource not found, bad request...
	4) Think about what you are going to put in your resource
		- Pay attention to not use any kind of sensitive information in the URIs 
	5) Use plurals
		- Prefer /users to /user
			- /users/1 to /user/1
	6) Use nous for resources
		- Use /users instead of /deleteUsers
		* There are some exceptions of course :) The best way is to sit and define a consistent approach to move on with
			- You can use like /users/search
			- PUT /gists/{id}/star
			- DELETE /gists/{id}/star
			
* Challenges

	1) Identify the boundaries of each microservice
		- What you should do, and what you shouldn't in each microservice
	2) Configuration Management
		- In a cloud environment, we could have 50, 100 instances of each microservices
		- Load distribution
			- Spring Cloud Configuration
	3) Dynamic scale up and scale down
		- Choose the properly technology to provide this feature
			- Naming Server (Eureka)
			- Ribbon (Client side load balancing)
			- Feign (Easier REST Clients)
	4) Visibility
		- Centralized log, monitoring around all microservices, automated processes to identify possible issues
			- Zipkin Distributed Tracing
			- Netflix Zuel API Gateway
	5) Pack of cards
		- If not well designed, your application will colapse very easily
		- Implementation of fault tolerance
			- Hystrix

* Advantages

	1) New technology and process adaption
		- Apps are a combination of microservices, all those microservices could be built in different languages
	2) Dynamic scaling
		- Scaling dynamically during the seasons of the year (Black Friday, vacation...)
	3) Faster Release Cycles
		- Bring features faster to Market
		
* Standardization

	- Important to standardize the ports and communication channels of the applications:
	- Ensure to be using the correct port
	- Standard URLs
	- Standard Environments
	
	Application                         Port
		Limits Service                      8080, 8081, ...
		Spring Cloud Config Server          8888
		Currency Exchange Service           8000, 8001, 8002, ..
		Currency Conversion Service         8100, 8101, 8102, ...
		Netflix Eureka Naming Server        8761
		Netflix Zuul API Gateway Server     8765
		Zipkin Distributed Tracing Server	9411